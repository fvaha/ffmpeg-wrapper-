#!/bin/bash

FFMPEG_BIN="/opt/serviio/ffmpeg-build/workspace/bin/ffmpeg"
LOG_DIR="/opt/serviio/log"
LOG_FILE="$LOG_DIR/ffmpeg-wrapper.log"
mkdir -p "$LOG_DIR"

ts(){ date +"%Y-%m-%d %H:%M:%S"; }

# -------- Detect probe --------
has_real_file=0
for a in "$@"; do [[ -f "$a" ]] && { has_real_file=1; break; }; done
has_cv=0; has_i=0
for a in "$@"; do [[ "$a" == "-c:v" ]] && has_cv=1; [[ "$a" == "-i" ]] && has_i=1; done
if [[ $has_cv -eq 0 || $has_i -eq 0 || $has_real_file -eq 0 ]]; then
  echo "[$(ts)] INFO: Passthrough (probe/non-transcode): $*" >> "$LOG_FILE"
  exec "$FFMPEG_BIN" "$@"
fi

# -------- Init --------
argv=("$@")
args=()
nvenc_selected=0
codec_used=""

PROFILE="${SERVIIO_CLIENT_PROFILE:-unknown}"
echo "[$(ts)] INFO: Using profile=$PROFILE" >> "$LOG_FILE"

# Input file
input_file=""
for a in "$@"; do [[ -f "$a" ]] && { input_file="$a"; break; }; done
base="${input_file%.*}"

# Thumbnail detection
thumbnail_mode=0
for ((i=0;i<${#argv[@]};i++)); do
  if [[ "${argv[$i]}" == "-frames:v" || "${argv[$i]}" == "-update" ]]; then thumbnail_mode=1; break; fi
  if [[ "${argv[$i]}" == "-f" && $((i+1)) -lt ${#argv[@]} && "${argv[$((i+1))]}" == "image2" ]]; then thumbnail_mode=1; break; fi
done

# Sidecar SRT
srt_file=""; have_srt=0
if [[ $thumbnail_mode -eq 0 && -n "$input_file" ]]; then
  if   [[ -f "${base}.srt"    ]]; then srt_file="${base}.srt";    have_srt=1
  elif [[ -f "${base}.en.srt" ]]; then srt_file="${base}.en.srt"; have_srt=1
  else
    lang_srt=$(ls "${base}".*.srt 2>/dev/null | head -n 1)
    [[ -n "$lang_srt" ]] && { srt_file="$lang_srt"; have_srt=1; }
  fi
fi

echo "[$(ts)] RAW args: ${argv[*]}" >> "$LOG_FILE"

# -------- Argument rewriter --------
i=0
while (( i < ${#argv[@]} )); do
  case "${argv[$i]}" in
    -c:v)
      if [[ -n "${argv[$((i+1))]}" ]]; then
        case "${argv[$((i+1))]}" in
          h264|libx264|mpeg2video|hevc|av1)
            if [[ "${argv[$((i+1))]}" == "hevc" ]]; then
              args+=( -c:v hevc_nvenc ); codec_used="hevc_nvenc"
            else
              args+=( -c:v h264_nvenc ); codec_used="h264_nvenc"
            fi
            nvenc_selected=1
            args+=( -preset p4 -rc vbr -tune hq \
                    -b:v 8000k -maxrate 12000k -bufsize 16000k \
                    -profile:v high -level 4.1 -g 48 -bf 2 \
                    -mpegts_flags +resend_headers -pix_fmt yuv420p )
            ;;
          *) args+=( -c:v "${argv[$((i+1))]}" ) ;;
        esac
        ((i++))
      fi
      ;;
    -vf|-filter_complex|-filter_complex_script)
      if [[ -n "${argv[$((i+1))]:-}" && "${argv[$((i+1))]}" == *"subtitles="* ]]; then
        echo "[$(ts)] INFO: Stripped Serviio filter (${argv[$i]} ${argv[$((i+1))]})" >> "$LOG_FILE"
        ((i++))
      else
        args+=("${argv[$i]}")
      fi
      ;;
    *subtitles=*) echo "[$(ts)] INFO: Stripped inline filter (${argv[$i]})" >> "$LOG_FILE" ;;
    -map)
      if [[ -n "${argv[$((i+1))]:-}" && "${argv[$((i+1))]}" == "[v]" ]]; then
        echo "[$(ts)] INFO: Replacing invalid -map [v] → -map 0:v:0" >> "$LOG_FILE"
        args+=( -map 0:v:0 )
        ((i++))
      else
        args+=("${argv[$i]}"); [[ -n "${argv[$((i+1))]:-}" ]] && { args+=("${argv[$((i+1))]}"); ((i++)); }
      fi
      ;;
    -qscale:v) echo "[$(ts)] INFO: Stripped qscale (NVENC incompatible)" >> "$LOG_FILE"; ((i++)) ;;
    -movflags) echo "[$(ts)] INFO: Stripped movflags mid-command" >> "$LOG_FILE"; ((i++)) ;;
    -f) echo "[$(ts)] INFO: Stripped mid-command -f ${argv[$((i+1))]}" >> "$LOG_FILE"; ((i++)) ;;
    *) args+=("${argv[$i]}") ;;
  esac
  ((i++))
done

# Add defaults
have_map=0; for t in "${args[@]}"; do [[ "$t" == "-map" ]] && have_map=1; done
[[ $have_map -eq 0 ]] && args+=( -map 0:v:0 -map 0:a:0 )
args+=( -max_muxing_queue_size 4096 )

# -------- Container decision --------
container="mp4"
if [[ "$PROFILE" == "samsung_mu6172_nvenc" || "$PROFILE" == "samsung_force_nvenc" ]]; then
  echo "[$(ts)] INFO: Samsung profile detected" >> "$LOG_FILE"
  if [[ "$input_file" == *.mp4 ]]; then
    args+=( -movflags +faststart -avoid_negative_ts make_zero )
    container="mp4"
  else
    container="mpegts"
  fi
else
  [[ "$input_file" == *.mp4 ]] && args+=( -movflags +faststart -avoid_negative_ts make_zero )
fi

# -------- Audio Normalization --------
if [[ "$PROFILE" == "samsung_mu6172_nvenc" || "$PROFILE" == "samsung_force_nvenc" ]]; then
  echo "[$(ts)] INFO: Forcing AAC → MP3 48kHz stereo" >> "$LOG_FILE"
  rebuilt=(); skip=0
  for ((i=0;i<${#args[@]};i++)); do
    if [[ "${args[$i]}" == "-c:a" || "${args[$i]}" == "-b:a" ]]; then skip=1; continue; fi
    if [[ $skip -eq 1 ]]; then skip=0; continue; fi
    rebuilt+=( "${args[$i]}" )
  done
  args=( "${rebuilt[@]}" -c:a mp3 -ar 48000 -ac 2 -b:a 192k )
fi

# -------- Output filename fix --------
out="${argv[-1]}"
rebuilt=()
for a in "${args[@]}"; do [[ "$a" == "$out" ]] && continue; rebuilt+=( "$a" ); done
rebuilt+=( -f "$container" "$out" )
args=( "${rebuilt[@]}" )

echo "[$(ts)] DEBUG: FINAL FFMPEG CMD: $FFMPEG_BIN ${args[*]}" >&2
echo "[$(ts)] DEBUG: Final args=${args[*]}" >> "$LOG_FILE"

# -------- Execute --------
[[ $thumbnail_mode -eq 1 ]] && exec "$FFMPEG_BIN" "${args[@]}"
[[ $have_srt -eq 1 ]] && echo "[$(ts)] INFO: Sidecar SRT found: $srt_file" >> "$LOG_FILE"

"$FFMPEG_BIN" "${args[@]}"; status=$?

# NVENC retry
if [[ $status -ne 0 && "$codec_used" == *nvenc* ]]; then
  echo "[$(ts)] WARN: NVENC failed → retry with -rc vbr" >> "$LOG_FILE"
  rebuilt=(); for a in "${args[@]}"; do [[ "$a" == "vbr_hq" ]] && rebuilt+=( vbr ) || rebuilt+=( "$a" ); done
  "$FFMPEG_BIN" "${rebuilt[@]}"; status=$?
fi

# NVENC → libx264 fallback
if [[ $status -ne 0 && "$codec_used" == *nvenc* ]]; then
  echo "[$(ts)] WARN: NVENC still failing → fallback to libx264" >> "$LOG_FILE"
  rebuilt=(); skip_next=0
  for a in "${args[@]}"; do
    if [[ $skip_next -eq 1 ]]; then skip_next=0; continue; fi
    case "$a" in
      h264_nvenc|hevc_nvenc) rebuilt+=( libx264 ) ;;
      -rc|-preset|-tune) skip_next=1 ;;
      *) rebuilt+=( "$a" ) ;;
    esac
  done
  rebuilt+=( -preset superfast -tune zerolatency )
  "$FFMPEG_BIN" "${rebuilt[@]}"; status=$?
fi

# Hardsub retry
if [[ $status -ne 0 && $have_srt -eq 1 ]]; then
  ff_srt="${srt_file//\'/\\\'}"
  echo "[$(ts)] WARN: Forcing hardsub fallback" >> "$LOG_FILE"
  rebuilt=( "${args[@]}" -vf "subtitles=$ff_srt" )
  exec "$FFMPEG_BIN" "${rebuilt[@]}"
fi

exit $status
